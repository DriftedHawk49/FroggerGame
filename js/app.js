
//Main File For Object Declarations and Definitions.
//This file contains all the Classes of Objects used & their defintions & declarations




let level = 1,      //variable to keep track of levels
    best=0,         //variable to keep track of best Score
    score=0,        //variable to keep track of current score
    norepeat =[],   // Array to help generate Random Numbers which are non repeated.
    life1 = "<img src=\"images/Heart.png\" width=\"20px\" height=\"30px\" alt=\"Life\">", // String to store HTML content to display 1 life on Page.
    life2 = "<img src=\"images/Heart.png\" width=\"20px\" height=\"30px\" alt=\"Life\"><img src=\"images/Heart.png\" width=\"20px\" height=\"30px\" alt=\"Life\">", // String to store HTML content to display 2 lives on Page.
    life3 = "<img src=\"images/Heart.png\" width=\"20px\" height=\"30px\" alt=\"Life\"><img src=\"images/Heart.png\" width=\"20px\" height=\"30px\" alt=\"Life\"><img src=\"images/Heart.png\" width=\"20px\" height=\"30px\" alt=\"Life\">", // String to store HTML content to display 3 lives on Page.
    lifenumber=0,   //Variable To keep track of Lives of player.
    selected = false,//Variable to keep track of Collectibles being collected.
    sound = true    //Variable to keep track of sound
    game_start=false;// Variable to keep track of Starting the main game , to initiate the Game Engine.


$("#music")[0].load();                          //Loading All the Sound Files We need ingame.
$("#move-selector")[0].load();
$("#move-ingame")[0].load();
$("#collide")[0].load();
$("#complete")[0].load();
$("#collect")[0].load();
$("#enter")[0].load();

$("#music")[0].volume=0.2;                      //Lowering Down The volume of Game Music.


$("#help_reveal").on("click",function(){        //On Click Event To Toggle Display of KeyBinds
    $("#written-material").toggleClass("hide");
    $(".keybinds").toggleClass("hide");
    if($("#written-material").css("display")==="none"){
        $("#help_reveal")[0].innerText = "Click here To Know About Game";
    }
    else $("#help_reveal")[0].innerText = "Click here To Know KeyBinds";
});


$("#mus").on("click",function(){                //On Click Event For Toggling the Mute State of Game Music
    if($("#music")[0].muted===false){
        $("#music")[0].muted=true;
        $(".controls")[0].src="images/no-music.png";
    }
    else {
        $("#music")[0].muted = false;
        $(".controls")[0].src="images/music.png";
    }
});

$("#sou").on("click",function(){                // On Click Event For Toggling the Mute State of Game Sounds
    if(sound===true){
        $("#move-selector")[0].muted=true;
        $("#move-ingame")[0].muted=true;
        $("#collide")[0].muted=true;
        $("#complete")[0].muted=true;
        $("#collect")[0].muted=true;
        $("#enter")[0].muted=true;
        $(".controls")[1].src="images/no-sound.png";
        sound=false;
    }
    else {
        $("#move-selector")[0].muted=false;
        $("#move-ingame")[0].muted=false;
        $("#collide")[0].muted=false;
        $("#complete")[0].muted=false;
        $("#collect")[0].muted=false;
        $("#enter")[0].muted=false;
        $(".controls")[1].src="images/sound.png";
        sound=true;
    }
});


let generator = function(row,col){              // A Helper Class used in Creating Objects to store Unique Row And Col Generated by function strictRandom()
    this.row = row;
    this.col = col;
}

var Randoms = function(max,min){                // Function to Generate Random Numbers Between two numbers Maximum and Minimum

    let result = Math.random()*(max-min+1);     // This Generates numbers between 0 to max-min+1
    result = Math.floor(result);                // This generates whole numbers
    result = result + min;                      // This adds Lower limit to the result
    return result;                              // function returns the required value

}



/*
Function strictRandom() takes 4 arguements ,max-row(rmax), min-row(rmin), max-col(cmax), min-col(cmin)
& then Generates temporary row(tempr) which is a random number between rmax & rmin, and temporary column(tempc)
which is again a random number between cmax & cmin by function Randoms(), then stores those values in an object of
generator() type, Then Runs a loop to check whether the same object exists in Array norepeat[] , if it doesn't exist, then it pushes
pos object into array norepeat for future checks , and returns pos to call place, If it exists , then tempc & tempr are recalculated
and all checking is done again until a unique row,col pair is found.

This Function was made with sole purpose of generating Distinct Rows And Columns for Collectibles.

*/
var strictRandom = function(rmax,rmin,cmax,cmin){
        let pos = new generator();
    while(1){
        let found=false;
        const tempr = Randoms(rmax,rmin);
        const tempc = Randoms(cmax,cmin);
        if(norepeat.length===0){                //If Array is empty , Then Just push in the object & break to return.
            pos.col = tempc;
            pos.row = tempr;
            norepeat.push(pos);
            break;
        }
        else{
            for(let number of norepeat){
                if(number.row===tempr&&number.col===tempc){
                    found=true;
                }
            }
            if(found===false){
                pos.col = tempc;
                pos.row = tempr;
                norepeat.push(pos);
                break;
            }
        }
    }
    return pos;
}



class Enemy{                                    //Enemy Class which we need to avoid collision in game.
    constructor(){

    this.col; // This takes control of column of enemy
    this.row; // This takes control of row of enemy
    this.speed; //This takes control of speed of enemy
    this.x; // This takes control of x-position of enemy
    this.y; // This takes control of y-position of enemy
    this.sprite = 'images/enemy-bug.png'; //This takes control of the image of enemy
    this.reset(); // Assigns value to all above parameters.
}

update(){                                       // function that updates row and column of the Enemy Object

    this.x = this.x + this.speed; // updates the speed of movement of the enemy, to keep it moving with that speed.
    this.y = this.row*83;
    if(this.x>6*83){   // If Reached at the end of Canvas , Restart.
        this.reset();
    }
}

render(){                                       // Function to render Enemy on the canvas
     ctx2.drawImage(Resources.get(this.sprite), this.x, this.y);
}

reset(){                                        // Function To Reset The position of Enemy

    this.col = -1; // Send it 1 coloumn behind the canvas
    this.row = Randoms(3,1); // Set Any 1 Row out of three.
    this.x = this.col*101; // Set the x-position according to column.
    this.y = this.row*83; // Set the y position according to Row
    this.speed = Randoms(6,2);// Set the speed of the enemies.
}

}


class players {                                 // Class Players to make a player object
    constructor(){
        this.x;                                 // This takes control of x-position of enemy
        this.y;                                 // This takes control of y-position of enemy
        this.row;                               // This takes control of row of enemy
        this.col;                               // This takes control of column of player
        this.sprite;                            //This takes control of the image of enemy
        this.reset();                           // Assigns value to all above parameters., Except of this.sprite , because it is set when player is selected via selection menu.
    }


    update(){                                   // Function To update the position of player
        if(this.row!=-1){
        this.x = 101*this.col;
        this.y = 87*this.row;
        }
    }

    render(){                                   // Function to render the position of player on screen

        ctx2.drawImage(Resources.get(this.sprite), this.x, this.y);
    }

    reset(){                                    // Function to reset the position of player

        this.row = 5;                           // Player comes back to Grass
        this.col = Randoms(3,1);                // Player is on any of the 1,2,3 Column
        this.x = this.row*87;                   // Set X- Axis position accordingly.
        this.y = this.col*101;                  // Set Y-Position Accordingly.
    }

    handleInput(key){                           // Function to update position of player on keypresses

        let change;                             // Variable to keep track of the change made on keypress,(used for implementing no movement when moving upon rock)
        if(key==="left"){
            $("#move-ingame")[0].play();        //Plays the Move Sound
            this.col--;                         //Changes the column accordingly
            change="colminus";                  //Registers the change
        }
        else if(key==="right"){
            $("#move-ingame")[0].play();        //Plays the Move Sound
            this.col++;                         //Changes the column accordingly
            change="colplus";                   //Registers the change
        }
        else if(key==="up"){
            $("#move-ingame")[0].play();        //Plays the Move Sound
            this.row--;                         //Changes the row accordingly
            change="rowminus";                  //Registers the change
        }
        else if(key==="down"){
            $("#move-ingame")[0].play();        //Plays the Move Sound
            this.row++;                         //Changes the row accordingly
            change="rowplus";                   //Registers the change
        }

        if(addon_array[4].row===this.row&&addon_array[4].col===this.col){ // To check whether the coordinates of stone & coordinates of player are same , if yes then->
            if(change==="colminus")this.col++;                          //Check what change was made , and reverse that change.
            if(change==="colplus")this.col--;
            if(change==="rowminus")this.row++;
            if(change==="rowplus")this.row--;
        }
        // For Handling Illegal moves which will try to push player out of canvas
        if(this.col<0){
            this.col=0;
        }
        if(this.row===6){
            this.row=5;
        }
        if(this.col>4){
            this.col=4;
        }
        if(this.row===-1){
            this.row=0;
        }
    }
}

class collectibles {                             //Class to define the collectible items in game , (Rock is also defined in this, though it is not a collectible)
    constructor(name,sprite,points){
        this.name = name;                        //Name of the collectible.
        this.points = points;                    //Points that collectible adds up to.
        let rcCombo = strictRandom(3,1,4,0);     //This calls to the function strictRandom to get the unique coordinates.
        this.row = rcCombo.row;                  //Assigns the Row And column via the returned object
        this.col = rcCombo.col;
        this.sprite = sprite;                    // Assign the image to the object
        this.x = this.col*101;                   // Assign the x-Position accordingly
        this.y = this.row*83;                    // Assign the y-Position accordingly
        this.collected = false;                  // Variable to Keep track of the fact whether it is collected by the player.
    }

    render(){                                    // This Function renders the object to the canvas
        ctx2.drawImage(Resources.get(this.sprite),this.x,this.y);
    }

    reset(){                                    // This function resets the position of the collectible , called when game is won.
        let rcCombo = strictRandom(3,1,4,0);
        this.row = rcCombo.row;
        this.col = rcCombo.col;
        this.x = this.col*101;
        this.y = this.row*83;
    }
}

class playerIcon {                              // Class PlayerIcon to store different player images
    constructor(col,row,sprite){
        this.x = 101*col;                       // Determines the x-position of the playericon
        this.y = 87*row;                        // Determines the y-position of the playericon
        this.col = col;                         // Determines the row of the playericon
        this.row = row;                         // Determines the column of the playericon
        this.sprite = sprite;                   // Determins the image of the playericon
    }

    render(){                                   // This function renders the player image to the canvas.
        ctx.drawImage(Resources.get(this.sprite),this.x,this.y);
    }
}

class selectors extends playerIcon {            // Class selectors inherited from the class playericon , for the selector icon

    constructor(col,row,sprite){                //This assigns the value of the parameters defined in the playericon , but are an instance of selectors.
        super(col,row,sprite);
    }
    update(){                                   //Updates the position of selector

        this.x = 101*this.col;//setting the position -x
        this.y = 87*this.row;//setting the position -y
    }

    handleInput(key){                           //Handles the keystrokes according to the key pressed on the keyboard for the selection of the player
        if(key==="left"){                       // If left arrow is pressed , update column accordingly
            this.col--;
            $("#move-selector")[0].play();      //Play the movement sound
        }
        else if(key==="right"){                 // If right arrow is pressed , update column accordingly
            this.col++;
            $("#move-selector")[0].play();      //Play the movement sound
        }
        else if(key==="enter"){
            $("#enter")[0].play();              //Play the Selection sound

            for(let icon of iconArray){         // Check in the iconArray ,

                if(this.col===icon.col&&this.row===icon.row){       //Where the coordinates of Selector & Playericon match,
                    player.sprite=icon.sprite;                      // Assign the playericon image to the player object
                    $("canvas").toggleClass("hide");                // Hide the Player Selection Canvas
                    Engine(window);                                 // Initiate the Main Game Engine.
                }
            }
            selected = true;                    // This signifys that the player has been selected.
        }

        //taking care of illegal keypresses
        if(this.col===-1) this.col=0;
        if(this.col===5) this.col=4;
        this.update();                          // Function to update the changes made here.
    }
}

class Tags{                                     // Class Tags to store the names of the players
    constructor(name,col){
        this.name = name;                       // Sets the name of the player
        this.col = col;                         // Sets the column of the player
        this.x = 101*col;                       // Sets the x-position of the player
    }
    update(){                                   // Function to update the position
        this.x = this.col*101;
    }
    render(){                                   // Function to render the name on the canvas
        ctx.fillText(this.name,this.x,5*70);
    }
}


let addon_array = [];                           // Array to store all the collectibles.

addon_array.push(new collectibles("Blue Gem","images/Gem_Blue.png",100));                   // Pushing in blue gem
addon_array.push(new collectibles("Green Gem","images/Gem_Green.png",200));                 // Pushing in green gem
addon_array.push(new collectibles("Orange Gem","images/Gem_Orange.png",500));               // Pushing in Orange gem
addon_array.push(new collectibles("health","images/Heart.png",0));                          // Pushing in Heart
addon_array.push(new collectibles("rock","images/Rock.png",0));                             // Pushing in the Rock

var iconArray = [];                             // Array to store the player icons for selection canvas
iconArray.push(new playerIcon(0,4,"images/char-boy.png"));                                  // Pushing in Boy Player
iconArray.push(new playerIcon(1,4,"images/char-cat-girl.png"));                             // Pushing in Cat girl player
iconArray.push(new playerIcon(2,4,"images/char-horn-girl.png"));                            // Pushing in Horn girl player
iconArray.push(new playerIcon(3,4,"images/char-pink-girl.png"));                            // Pushing in Pink Girl
iconArray.push(new playerIcon(4,4,"images/char-princess-girl.png"));                        // Pushing in Princess

let selector = new selectors(0,4,"images/Selector.png");// Defining a selector icon for player selection

let tags = [                                   // Array to store the improvised names of the players.
    new Tags("Boy",0),
    new Tags("Kitty Girl",1),
    new Tags("Bully Girl",2),
    new Tags("Innocent Pinky",3),
    new Tags("The Queen",4)
];

allEnemies = [];                                // Array to store the enemies.
for(var t=0;t<3;t++){
    allEnemies.push(new Enemy());               // Pushing in the Enemy Objects
}

var player = new players();                     // Defining the Game player.



document.addEventListener("keyup",function(e){  // Event Listener for Player Selection Screen for key release on keyboard
    let allowedKeys = {
        37:"left",
        39:"right",
        13:"enter"
    };
    if(game_start===false){                     // Check the game is started or not( in other words , player is selected or not.) if not then->
        selector.handleInput(allowedKeys[e.keyCode]);  // Call the handleInput() function of the selector.
        if(e.keyCode===13){                     // Check that pressed key is Enter, if yes , then->
            game_start=true;                    // Set the game_start to true , which will make this event listener useless , because once the player is selected , we don't need this event listener
        }
    }
});



document.addEventListener("keydown", function(e) {      //Event Listener for key press , to avoid the JS Engine to do scroll the page , which is default action of keydown.
    // space and arrow keys
    if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
        e.preventDefault();
    }
}, false);
